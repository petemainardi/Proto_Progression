using UnityEngine;
using UniRx;
using Sirenix.OdinInspector;


// ================================================================================================
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// ================================================================================================
/**
 *  Awards an integer-amount of points on a subscribed death event by emitting the points as a
 *  change in the corresponding ReactiveProperty.
 */
// ================================================================================================
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// ================================================================================================
public class DeathRewarder : MonoBehaviour, IPointsRewarder
{
    // Fields =====================================================================================
    [SerializeField]
    private readonly int rewardPoints = 5;
    public int RewardPoints => this.rewardPoints;

    [ReadOnly]
    public readonly IntReactiveProperty Reward = new IntReactiveProperty();
    IntReactiveProperty IPointsRewarder.Reward => this.Reward;
    // ============================================================================================

    // Mono =======================================================================================
    private void OnDestroy()
    {
        this.Reward.Value = this.RewardPoints;
    }
    // ============================================================================================

}
// ================================================================================================
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// ================================================================================================
